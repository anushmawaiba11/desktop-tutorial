class InvalidAnimalDataException extends Exception {
    public InvalidAnimalDataException(String msg) { super(msg); }
}

abstract class Animal {
    private String name;
    private int age;

    public Animal(String name, int age) throws InvalidAnimalDataException {
        if (name == null || name.isEmpty())
            throw new InvalidAnimalDataException("Animal name cannot be empty!");
        if (age < 0)
            throw new InvalidAnimalDataException("Animal age cannot be negative!");
        this.name = name;
        this.age = age;
    }

    public String getName() { return name; }
    public int getAge() { return age; }

    public abstract void makeSound();
}

class Dog extends Animal {
    public Dog(String name, int age) throws InvalidAnimalDataException {
        super(name, age);
    }

    @Override
    public void makeSound() {
        System.out.println(getName() + " (Dog) says: Woof! Woof!");
    }
}

class Cat extends Animal {
    public Cat(String name, int age) throws InvalidAnimalDataException {
        super(name, age);
    }

    @Override
    public void makeSound() {
        System.out.println(getName() + " (Cat) says: Meow!");
    }
}

class Cow extends Animal {
    public Cow(String name, int age) throws InvalidAnimalDataException {
        super(name, age);
    }

    @Override
    public void makeSound() {
        System.out.println(getName() + " (Cow) says: Moo!");
    }
}

public class AnimalTest {

    public static void printSound(Animal a) {
        a.makeSound();
    }

    public static void main(String[] args) {
        try {
            Animal d = new Dog("Tommy", 3);
            Animal c = new Cat("Kitty", 2);
            Animal cow = new Cow("Gauri", 5);


            printSound(d);
            printSound(c);
            printSound(cow);

            
            Animal bad = new Dog("", -1);

        } catch (InvalidAnimalDataException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

