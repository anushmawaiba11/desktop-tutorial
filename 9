class InvalidApplianceStateException extends Exception {
    public InvalidApplianceStateException(String message) {
        super(message);
    }
}

abstract class Appliance {
    private String name;
    private boolean isOn;

   
    public Appliance(String name) {
        this.name = name;
        this.isOn = false;
    }
    
    public String getName() {
        return name;
    }

    public boolean isOn() {
        return isOn;
    }

    protected void setOn(boolean on) {
        isOn = on;
    }

   
    public abstract void turnOn() throws InvalidApplianceStateException;
    public abstract void turnOff() throws InvalidApplianceStateException;
}


class Fan extends Appliance {
    public Fan() {
        super("Fan");
    }

    @Override
    public void turnOn() throws InvalidApplianceStateException {
        if (isOn()) throw new InvalidApplianceStateException("Fan is already ON!");
        setOn(true);
        System.out.println("Fan is turned ON.");
    }

    @Override
    public void turnOff() throws InvalidApplianceStateException {
        if (!isOn()) throw new InvalidApplianceStateException("Fan is already OFF!");
        setOn(false);
        System.out.println("Fan is turned OFF.");
    }
}


class Light extends Appliance {
    public Light() {
        super("Light");
    }

    @Override
    public void turnOn() throws InvalidApplianceStateException {
        if (isOn()) throw new InvalidApplianceStateException("Light is already ON!");
        setOn(true);
        System.out.println("Light is turned ON.");
    }

    @Override
    public void turnOff() throws InvalidApplianceStateException {
        if (!isOn()) throw new InvalidApplianceStateException("Light is already OFF!");
        setOn(false);
        System.out.println("Light is turned OFF.");
    }
}

class AC extends Appliance {
    public AC() {
        super("Air Conditioner");
    }

    @Override
    public void turnOn() throws InvalidApplianceStateException {
        if (isOn()) throw new InvalidApplianceStateException("AC is already ON!");
        setOn(true);
        System.out.println("Air Conditioner is turned ON.");
    }

    @Override
    public void turnOff() throws InvalidApplianceStateException {
        if (!isOn()) throw new InvalidApplianceStateException("AC is already OFF!");
        setOn(false);
        System.out.println("Air Conditioner is turned OFF.");
    }
}

public class ApplianceControlSystem {
    public static void main(String[] args) {
        try {
            Appliance[] appliances = {
                    new Fan(),
                    new Light(),
                    new AC()
            };

          
            for (Appliance a : appliances) {
                a.turnOn();
            }

            appliances[0].turnOff();
            appliances[1].turnOff();

            
            appliances[2].turnOff();

        } catch (InvalidApplianceStateException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
