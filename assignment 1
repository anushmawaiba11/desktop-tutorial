class InvalidSalaryException extends Exception {
    public InvalidSalaryException(String msg) { super(msg); }
}

abstract class Employee {
    private String name;
    private double baseSalary;

    public Employee(String name, double baseSalary) throws InvalidSalaryException {
        if (baseSalary < 0) throw new InvalidSalaryException("Salary cannot be negative!");
        this.name = name; this.baseSalary = baseSalary;
    }

    public String getName() { return name; }
    public double getBaseSalary() { return baseSalary; }

    public abstract double calculateSalary(); // Polymorphism
}


class Manager extends Employee {
    private double bonus;
    public Manager(String n, double s, double b) throws InvalidSalaryException {
        super(n, s);
        if (b < 0) throw new InvalidSalaryException("Bonus cannot be negative!");
        bonus = b;
    }
    public double calculateSalary() { return getBaseSalary() + bonus; }
}


class Developer extends Employee {
    private double overtime;
    public Developer(String n, double s, double o) throws InvalidSalaryException {
        super(n, s);
        if (o < 0) throw new InvalidSalaryException("Overtime cannot be negative!");
        overtime = o;
    }
    public double calculateSalary() { return getBaseSalary() + overtime; }
}


public class EmployeeTest {
    public static void main(String[] args) {
        try {
            Employee e1 = new Manager("Alice", 50000, 10000);
            Employee e2 = new Developer("Bob", 40000, 5000);

            System.out.println(e1.getName() + " Salary: " + e1.calculateSalary());
            System.out.println(e2.getName() + " Salary: " + e2.calculateSalary());
        } catch (InvalidSalaryException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
